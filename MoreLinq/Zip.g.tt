<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
#region License and Terms
// MoreLINQ - Extensions to LINQ to Objects
// Copyright (c) 2019 Pierre Lando. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#endregion

<#
    var ordinals = new[] {null, "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth"};
    var arities = new[] {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight"};

    var overloads =
        from i in Enumerable.Range(2, 7)
        select new
        {
            Arity = arities[i],
            Arguments = Enumerable.Range(1, i)
                .Select(j => new
                {
                    Num = j,
                    Number = j.ToString(CultureInfo.InvariantCulture),
                    Ordinal = ordinals[j]
                }).ToList(),
            Count = i,
            Number = i.ToString(CultureInfo.InvariantCulture),
            Ordinal = ordinals[i],
            Types = string.Join(", ", Enumerable.Range(1, i).Select(i => $"T{i}")),
        };
#>
namespace MoreLinq
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    static partial class MoreEnumerable
    {
<#  foreach (var o in overloads)
    {
#>
        /// <summary>
        /// Returns a projection of tuples, where each tuple contains the N-th
        /// element from each of the input sequences. An exception is thrown
        /// if the input sequences are of different lengths.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
        /// <typeparam name="TResult">Type of elements in result sequence.</typeparam>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <param name="resultSelector">
        /// Function to apply to each tuple of elements.</param>
        /// <returns>
        /// A projection of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <exception cref="InvalidOperationException">
        /// The input sequences are of different lengths.
        /// </exception>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        /// </remarks>
        public static IEnumerable<TResult> EquiZip<<#= o.Types#>, TResult>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source,
<#}#>
            Func<<#= o.Types#>, TResult> resultSelector)
        {
<# foreach (var arg in o.Arguments) { #>
            if (<#= arg.Ordinal #>Source == null) throw new ArgumentNullException(nameof(<#= arg.Ordinal #>Source));
<#} #>
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

            return _(); IEnumerable<TResult> _()
            {
<# foreach (var arg in o.Arguments) { #>
                using var e<#= arg.Number #> = <#= arg.Ordinal #>Source.GetEnumerator();
<#} #>

                for (;;)
                {
                    if (e<#= o.Arguments.First().Number #>.MoveNext())
                    {
                        if (<# foreach (var arg in o.Arguments.Skip(1)) { #>e<#= arg.Number #>.MoveNext()<#= arg.Num < o.Count ? " && " : "" #><#}#>)
                        {
                            yield return resultSelector(<# foreach (var arg in o.Arguments) { #>e<#= arg.Number #>.Current<#= arg.Num < o.Count ? ", " : "" #><#}#>);
                        }
                        else
                        {
                            break;
                        }
                    }
                    else
                    {
                        if (<# foreach (var arg in o.Arguments.Skip(1)) { #>e<#= arg.Number #>.MoveNext()<#= arg.Num < o.Count ? " || " : "" #><#}#>)
                        {
                            break;
                        }
                        else
                        {
                            yield break;
                        }
                    }
                }

                throw new InvalidOperationException($"Sequences differ in length.");
            }
        }

        /// <summary>
        /// Returns a sequence of tuples, where each tuple contains the N-th
        /// element from each of the input sequences. An exception is thrown
        /// if the input sequences are of different lengths.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <returns>
        /// A sequence of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <exception cref="InvalidOperationException">
        /// The input sequences are of different lengths.
        /// </exception>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        /// </remarks>
        public static IEnumerable<(<#= o.Types#>)> EquiZip<<#= o.Types#>>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source<#= arg.Num < o.Count ? "," : ")" #>
<#}#>
        {
            return EquiZip(
<# foreach (var arg in o.Arguments) { #>
                <#= arg.Ordinal #>Source,
<#}#>
                ValueTuple.Create);
        }

        /// <summary>
        /// Returns a projection of tuples, where each tuple contains the N-th
        /// element from each of the input sequences. The resulting sequence
        /// will always be as long as the longest of input sequences where the
        /// default value of each of the shorter sequence element types is used
        /// for padding.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
        /// <typeparam name="TResult">Type of elements in result sequence.</typeparam>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <param name="resultSelector">
        /// Function to apply to each tuple of elements.</param>
        /// <returns>
        /// A projection of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        /// </remarks>
        public static IEnumerable<TResult> ZipLongest<<#= o.Types#>, TResult>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source,
<#}#>
            Func<<#= o.Types#>, TResult> resultSelector)
        {
<# foreach (var arg in o.Arguments) { #>
            if (<#= arg.Ordinal #>Source == null) throw new ArgumentNullException(nameof(<#= arg.Ordinal #>Source));
<#} #>
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

            return _(); IEnumerable<TResult> _()
            {
<# foreach (var arg in o.Arguments) { #>
                IEnumerator<T<#= arg.Number #>> e<#= arg.Number #> = null;
<#} #>

                try
                {
<# foreach (var arg in o.Arguments) { #>
                    e<#= arg.Number #> = <#= arg.Ordinal #>Source.GetEnumerator();
<#} #>

<# foreach (var arg in o.Arguments) { #>
                    var v<#= arg.Number #> = default(T<#= arg.Number #>);
<#} #>

                    while (
<# foreach (var arg in o.Arguments) { #>
                        ZipHelper.MoveNextOrDefault<T<#= arg.Number #>>(ref e<#= arg.Number #>, ref v<#= arg.Number #>)<#= arg.Num < o.Count ? " +" : " > 0)" #>
<#}#>
                    {
                        yield return resultSelector(<# foreach (var arg in o.Arguments) { #>v<#= arg.Number #><#= arg.Num < o.Count ? ", " : "" #><#}#>);
                    }
                }
                finally
                {
<# foreach (var arg in o.Arguments) { #>
                    e<#= arg.Number #>?.Dispose();
<#} #>
                }
            }
        }

        /// <summary>
        /// Returns a sequence of tuples, where each tuple contains the N-th
        /// element from each of the input sequences. The resulting sequence
        /// will always be as long as the longest of input sequences where the
        /// default value of each of the shorter sequence element types is used
        /// for padding.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <returns>
        /// A sequence of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        /// </remarks>
        public static IEnumerable<(<#= o.Types#>)> ZipLongest<<#= o.Types#>>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source<#= arg.Num < o.Count ? "," : ")" #>
<#}#>
        {
            return ZipLongest(
<# foreach (var arg in o.Arguments) { #>
                <#= arg.Ordinal #>Source,
<#}#>
                ValueTuple.Create);
        }

        /// <summary>
        /// Returns a projection of tuples, where each tuple contains the N-th
        /// element from each of the input sequences. The resulting sequence
        /// is as short as the shortest input sequence.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
        /// <typeparam name="TResult">Type of elements in result sequence.</typeparam>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <param name="resultSelector">
        /// Function to apply to each tuple of elements.</param>
        /// <returns>
        /// A projection of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <remarks>
        /// <para>
        /// If the input sequences are of different lengths, the result sequence
        /// is terminated as soon as the shortest input sequence is exhausted
        /// and remainder elements from the longer sequences are never consumed.
        /// </para>
        /// <para>
        /// This operator uses deferred execution and streams its results.</para>
        /// </remarks>

        public static IEnumerable<TResult> ZipShortest<<#= o.Types#>, TResult>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source,
<#}#>
            Func<<#= o.Types#>, TResult> resultSelector)
        {
<# foreach (var arg in o.Arguments) { #>
            if (<#= arg.Ordinal #>Source == null) throw new ArgumentNullException(nameof(<#= arg.Ordinal #>Source));
<#} #>
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

            return _(); IEnumerable<TResult> _()
            {
<# foreach (var arg in o.Arguments) { #>
                using var e<#= arg.Number #> = <#= arg.Ordinal #>Source.GetEnumerator();
<#} #>

                while (<# foreach (var arg in o.Arguments) { #>e<#= arg.Number #>.MoveNext()<#= arg.Num < o.Count ? " && " : "" #><#}#>)
                {
                    yield return resultSelector(<# foreach (var arg in o.Arguments) { #>e<#= arg.Number #>.Current<#= arg.Num < o.Count ? ", " : "" #><#}#>);
                }
            }
        }

        /// <summary>
        /// Returns a sequence of tuples, where each tuple contains the N-th
        /// element from each of the input sequences. The resulting sequence
        /// is as short as the shortest input sequence.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <returns>
        /// A sequence of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <remarks>
        /// <para>
        /// If the input sequences are of different lengths, the result sequence
        /// is terminated as soon as the shortest input sequence is exhausted
        /// and remainder elements from the longer sequences are never consumed.
        /// </para>
        /// <para>
        /// This operator uses deferred execution and streams its results.</para>
        /// </remarks>

        public static IEnumerable<(<#= o.Types#>)> ZipShortest<<#= o.Types#>>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source<#= arg.Num < o.Count ? "," : ")" #>
<#}#>
        {
            return ZipShortest(
<# foreach (var arg in o.Arguments) { #>
                <#= arg.Ordinal #>Source,
<#}#>
                ValueTuple.Create);
        }

        /// <summary>
        /// Returns a projection of tuples, where each tuple contains the N-th
        /// element from each of the input sequences.
        /// When the end of one or more input sequence is reached, on the next iteration, the given <paramref name="predicate"/>
        /// is called with in parameter the list of the 1-based indices of the source parameters that have not reached their end.
        /// If the call to the <paramref name="predicate"/> return <c>false</c> the zip enumeration stop.
        /// If the enumeration continues, the default value of each of the shorter sequence element types
        /// is used for padding.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
        /// <typeparam name="TResult">Type of elements in result sequence.</typeparam>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <param name="resultSelector">
        /// Function to apply to each tuple of elements.</param>
        /// <param name="predicate">
        /// A function to test the end of the zip sequence.</param>
        /// <returns>
        /// A sequence of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        ///
        /// The <paramref name="predicate"/> is not called when all the input sequence have reached their end.
        /// The <paramref name="predicate"/> is called at most <#= arities[o.Count-1] #> times.
        /// </remarks>
        public static IEnumerable<TResult> ZipWhile<<#= o.Types#>, TResult>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source,
<#}#>
            Func<<#= o.Types#>, TResult> resultSelector,
            Func<IReadOnlyList<int>, bool> predicate)
        {
<# foreach (var arg in o.Arguments) { #>
            if (<#= arg.Ordinal #>Source == null) throw new ArgumentNullException(nameof(<#= arg.Ordinal #>Source));
<#} #>
            if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));
            if (predicate == null) throw new ArgumentNullException(nameof(predicate));

            return _(); IEnumerable<TResult> _()
            {
<# foreach (var arg in o.Arguments) { #>
                IEnumerator<T<#= arg.Number #>> e<#= arg.Number #> = null;
<#} #>

                try
                {
<# foreach (var arg in o.Arguments) { #>
                    e<#= arg.Number #> = <#= arg.Ordinal #>Source.GetEnumerator();
<#} #>

<# foreach (var arg in o.Arguments) { #>
                    var v<#= arg.Number #> = default(T<#= arg.Number #>);
<#} #>

                    var activeSourceCount = <#= o.Count #>;
                    for(;;)
                    {
                        var newActiveSourceCount =
<# foreach (var arg in o.Arguments) { #>
                            ZipHelper.MoveNextOrDefault<T<#= arg.Number #>>(ref e<#= arg.Number #>, ref v<#= arg.Number #>)<#= arg.Num < o.Count ? " +" : ";" #>
<#}#>

                        if (activeSourceCount != newActiveSourceCount)
                        {
                            if (!ZipHelper.ShouldContinue(predicate, <# foreach (var arg in o.Arguments) { #>e<#= arg.Number #><#= arg.Num < o.Count ? ", " : "))" #><#} #>

                            {
                                yield break;
                            }
                            activeSourceCount = newActiveSourceCount;
                        }

                        yield return resultSelector(<# foreach (var arg in o.Arguments) { #>v<#= arg.Number #><#= arg.Num < o.Count ? ", " : "" #><#}#>);
                    }
                }
                finally
                {
<# foreach (var arg in o.Arguments) { #>
                    e<#= arg.Number #>?.Dispose();
<#} #>
                }
            }
        }

        /// <summary>
        /// Returns a sequence of tuples, where each tuple contains the N-th
        /// element from each of the input sequences.
        /// When the end of one or more input sequence is reached, on the next iteration, the given <paramref name="predicate"/>
        /// is called with in parameter the list of the 1-based indices of the source parameters that have not reached their end.
        /// If the call to the <paramref name="predicate"/> return <c>false</c> the zip enumeration stop.
        /// If the enumeration continues, the default value of each of the shorter sequence element types
        /// is used for padding.
        /// </summary>
<# foreach (var arg in o.Arguments) { #>
        /// <typeparam name="T<#= arg.Number #>">Type of elements in <#= arg.Ordinal #> input sequence.</typeparam>
<#} #>
<# foreach (var arg in o.Arguments) { #>
        /// <param name="<#= arg.Ordinal #>Source">The <#= arg.Ordinal #> source sequence.</param>
<#} #>
        /// <param name="predicate">
        /// A function to test the end of the zip sequence.</param>
        /// <returns>
        /// A projection of tuples, where each tuple contains the N-th element
        /// from each of the argument sequences.</returns>
        /// <remarks>
        /// This operator uses deferred execution and streams its results.
        ///
        /// The <paramref name="predicate"/> is not called when all the input sequence have reached their end.
        /// The <paramref name="predicate"/> is called at most <#= arities[o.Count-1] #> times.
        /// </remarks>
        public static IEnumerable<(<#= o.Types#>)> ZipWhile<<#= o.Types#>>(
<# foreach (var arg in o.Arguments) { #>
            <#= arg.Num == 1 ? "this " : "" #>IEnumerable<T<#= arg.Number #>> <#= arg.Ordinal #>Source,
<#}#>
            Func<IReadOnlyList<int>, bool> predicate)
        {
            return ZipWhile(
<# foreach (var arg in o.Arguments) { #>
                <#= arg.Ordinal #>Source,
<#}#>
                ValueTuple.Create,
                predicate);
        }

<#  } #>

        static class ZipHelper
        {
            public static int MoveNextOrDefault<T>(ref IEnumerator<T> enumerator, ref T value)
            {
                if (enumerator == null)
                {
                    return 0;
                }

                if (enumerator.MoveNext())
                {
                    value = enumerator.Current;
                    return 1;
                }

                enumerator.Dispose();
                enumerator = null;
                value = default;
                return 0;
            }

            public static bool ShouldContinue(Func<IReadOnlyList<int>, bool> predicate, params IEnumerator[] enumerators)
            {
                if (enumerators.All(e => e == null))
                {
                    return false;
                }

                return predicate(
                    enumerators
                        .Select((enumerator, index) => new {enumerator, index})
                        .Where(t => t.enumerator != null)
                        .Select(t => t.index + 1)
                        .ToList());
            }
        }
    }
}
